{"action": "ACTION_SET_ALARM", "uri": "None", "mime": {}, "extras": {"EXTRA_HOUR": "The hour for the alarm.", "EXTRA_MINUTES": "The minutes for the alarm.", "EXTRA_MESSAGE": "A custom message to identify the alarm.", "EXTRA_DAYS": "An ArrayList including each week day on which this alarm\n      repeats. Each day must be declared with an integer from the Calendar\n      class, such as MONDAY.\n      For a one-time alarm, don't specify this extra.", "EXTRA_RINGTONE": "A content: URI specifying a ringtone to use with the alarm, or VALUE_RINGTONE_SILENT for no ringtone.\n      To use the default ringtone, don't specify this extra.", "EXTRA_VIBRATE": "A boolean specifying whether to vibrate for this alarm.", "EXTRA_SKIP_UI": "A boolean specifying whether the responding app must skip its UI when setting the alarm.\n      If true, the app must bypass any confirmation UI and set the specified alarm."}, "desc": "The following are common actions for alarm clock apps, including the information you need\nto create an intent filter to advertise your app's ability to perform each action.\nTo create a new alarm, use the ACTION_SET_ALARM action and specify alarm details such as the time and message using the following extras.\nNote: Only the hour, minutes, and message extras are available in Android 2.3 (API level 9) and lower. The other extras are available in higher versions of the platform.\n", "id": 1}
{"action": "ACTION_SET_TIMER", "uri": "None", "mime": {}, "extras": {"EXTRA_LENGTH": "The length of the timer in seconds.", "EXTRA_MESSAGE": "A custom message to identify the timer.", "EXTRA_SKIP_UI": "A boolean specifying whether the responding app must skip its UI when setting the timer.\n      If true, the app must bypass any confirmation UI and start the specified timer."}, "desc": "The following are common actions for alarm clock apps, including the information you need\nto create an intent filter to advertise your app's ability to perform each action.\nTo create a countdown timer, use the ACTION_SET_TIMER action and specify timer details such as the duration using the following extras.\nNote: This intent is available in Android 4.4 (API level 19) and higher.\n", "id": 2}
{"action": "ACTION_SHOW_ALARMS", "uri": "None", "mime": {}, "extras": {}, "desc": "The following are common actions for alarm clock apps, including the information you need\nto create an intent filter to advertise your app's ability to perform each action.\nTo show the list of alarms, use the ACTION_SHOW_ALARMS action.\nAlthough not many apps invoke this intent, as it's primarily used by system apps, any app that behaves as an alarm clock can implement this intent filter and respond by showing the list of current alarms.\nNote: This intent is available in Android 4.4 (API level 19) and higher.\n", "id": 3}
{"action": "ACTION_INSERT", "uri": "Events.CONTENT_URI", "mime": {}, "extras": {"EXTRA_EVENT_ALL_DAY": "A boolean specifying whether this is an all-day event.", "EXTRA_EVENT_BEGIN_TIME": "The start time of the event (milliseconds since epoch).", "EXTRA_EVENT_END_TIME": "The end time of the event (milliseconds since epoch).", "TITLE": "The event title.", "DESCRIPTION": "The event description.", "EVENT_LOCATION": "The event location.", "EXTRA_EMAIL": "A comma-separated list of email addresses that specify the invitees."}, "desc": "Adding an event is a common action for calendar apps.\nCreate an intent filter to advertise your app's ability to perform this action using the\ninformation in the following section.\nTo add a new event to the user's calendar, use the ACTION_INSERT action and specify the data URI using Events.CONTENT_URI. You can then specify various event details using the following extras.\n", "id": 4}
{"action": "ACTION_IMAGE_CAPTURE", "uri": "None", "mime": {}, "extras": {"EXTRA_OUTPUT": "The URI location where the camera app saves the photo or\n      video file (as a Uri object)."}, "desc": "The following are common actions for camera apps, including the information you need\nto create an intent filter to advertise your app's ability to perform each action.\nTo open a camera app and receive the resulting photo or video, use the ACTION_IMAGE_CAPTURE or ACTION_VIDEO_CAPTURE action. Also specify the URI location where you'd like the camera to save the photo or video, in the EXTRA_OUTPUT extra.\n", "id": 5}
{"action": "ACTION_VIDEO_CAPTURE", "uri": "None", "mime": {}, "extras": {"EXTRA_OUTPUT": "The URI location where the camera app saves the photo or\n      video file (as a Uri object)."}, "desc": "The following are common actions for camera apps, including the information you need\nto create an intent filter to advertise your app's ability to perform each action.\nTo open a camera app and receive the resulting photo or video, use the ACTION_IMAGE_CAPTURE or ACTION_VIDEO_CAPTURE action. Also specify the URI location where you'd like the camera to save the photo or video, in the EXTRA_OUTPUT extra.\n", "id": 6}
{"action": "ACTION_PICK", "uri": "None", "mime": {}, "extras": {}, "desc": "The following are common actions for contacts management apps, including the information you need\nto create an intent filter to advertise your app's ability to perform each action.\nTo have the user select a contact and provide your app access to all the contact information, use the ACTION_PICK action and specify the MIME type to Contacts.CONTENT_TYPE.\nThe result Intent delivered to your onActivityResult() callback contains the content: URI pointing to the selected contact. The response grants your app temporary permissions to read that contact using the Contacts Provider API, even if your app doesn't include the READ_CONTACTS permission.\nTip: If you need access to only a specific piece of contact information, such as a phone number or email address, instead see the next section about how to select specific contact data.\n", "id": 7}
{"action": "ACTION_PICK", "uri": "None", "mime": {"CommonDataKinds.Phone.CONTENT_TYPE": "Pick from contacts with a phone number.", "CommonDataKinds.Email.CONTENT_TYPE": "Pick from contacts with an email address.", "CommonDataKinds.StructuredPostal.CONTENT_TYPE": "Pick from contacts with a postal address."}, "extras": {}, "desc": "The following are common actions for contacts management apps, including the information you need\nto create an intent filter to advertise your app's ability to perform each action.\nTo have the user select a specific piece of information from a contact, such as a phone number, email address, or other data type, use the ACTION_PICK action and specify the MIME type to one of the following content types, such as CommonDataKinds.Phone.CONTENT_TYPE to get the contact's phone number.\nNote: In many cases, your app needs to have the READ_CONTACTS permission to view specific information about a particular contact.\nIf you need to retrieve only one type of data from a contact, this technique with a CONTENT_TYPE from the ContactsContract.CommonDataKinds classes is more efficient than using the Contacts.CONTENT_TYPE, as shown in the preceding section. The result provides you direct access to the desired data without requiring you to perform a more complex query to Contacts Provider.\nThe result Intent delivered to your onActivityResult() callback contains the content: URI pointing to the selected contact data. The response grants your app temporary permissions to read that contact data even if your app doesn't include the READ_CONTACTS permission.\n", "id": 8}
{"action": "ACTION_VIEW", "uri": "content:<URI>", "mime": {}, "extras": {}, "desc": "The following are common actions for contacts management apps, including the information you need\nto create an intent filter to advertise your app's ability to perform each action.\nTo display the details for a known contact, use the ACTION_VIEW action and specify the contact with a content: URI as the intent data.\nThere are two primary ways to initially retrieve the contact's URI:\n", "id": 9}
{"action": "ACTION_EDIT", "uri": "content:<URI>", "mime": {}, "extras": {}, "desc": "The following are common actions for contacts management apps, including the information you need\nto create an intent filter to advertise your app's ability to perform each action.\nTo edit a known contact, use the ACTION_EDIT action, specify the contact with a content: URI as the intent data, and include any known contact information in extras specified by constants in ContactsContract.Intents.Insert.\nThere are two primary ways to initially retrieve the contact URI:\n", "id": 10}
{"action": "ACTION_INSERT", "uri": "None", "mime": {}, "extras": {}, "desc": "The following are common actions for contacts management apps, including the information you need\nto create an intent filter to advertise your app's ability to perform each action.\nTo insert a new contact, use the ACTION_INSERT action, specify Contacts.CONTENT_TYPE as the MIME type, and include any known contact information in extras specified by constants in ContactsContract.Intents.Insert.\n", "id": 11}
{"action": "ACTION_SENDTO", "uri": "None", "mime": {"\"text/plain\"\n    \"*/*\"\n  ": ""}, "extras": {"Intent.EXTRA_EMAIL": "A string array of all \"To\" recipient email addresses.", "Intent.EXTRA_CC": "A string array of all \"CC\" recipient email addresses.", "Intent.EXTRA_BCC": "A string array of all \"BCC\" recipient email addresses.", "Intent.EXTRA_SUBJECT": "A string with the email subject.", "Intent.EXTRA_TEXT": "A string with the body of the email.", "Intent.EXTRA_STREAM": "A Uri pointing to the attachment.\n        If using the\n        ACTION_SEND_MULTIPLE\n        action, this instead is an\n        ArrayList containing\n        multiple Uri objects."}, "desc": "Composing an email with optional attachments is a common action for email apps.\nCreate an intent filter to advertise your app's ability to perform this action using the\ninformation in the following section.\nTo compose an email, use one of the following actions based on whether you'll include attachments or not, and include email details such as the recipient and subject using the extra keys listed.\n", "id": 12}
{"action": "ACTION_SEND", "uri": "None", "mime": {"\"text/plain\"\n    \"*/*\"\n  ": ""}, "extras": {"Intent.EXTRA_EMAIL": "A string array of all \"To\" recipient email addresses.", "Intent.EXTRA_CC": "A string array of all \"CC\" recipient email addresses.", "Intent.EXTRA_BCC": "A string array of all \"BCC\" recipient email addresses.", "Intent.EXTRA_SUBJECT": "A string with the email subject.", "Intent.EXTRA_TEXT": "A string with the body of the email.", "Intent.EXTRA_STREAM": "A Uri pointing to the attachment.\n        If using the\n        ACTION_SEND_MULTIPLE\n        action, this instead is an\n        ArrayList containing\n        multiple Uri objects."}, "desc": "Composing an email with optional attachments is a common action for email apps.\nCreate an intent filter to advertise your app's ability to perform this action using the\ninformation in the following section.\nTo compose an email, use one of the following actions based on whether you'll include attachments or not, and include email details such as the recipient and subject using the extra keys listed.\n", "id": 13}
{"action": "ACTION_SEND_MULTIPLE", "uri": "None", "mime": {"\"text/plain\"\n    \"*/*\"\n  ": ""}, "extras": {"Intent.EXTRA_EMAIL": "A string array of all \"To\" recipient email addresses.", "Intent.EXTRA_CC": "A string array of all \"CC\" recipient email addresses.", "Intent.EXTRA_BCC": "A string array of all \"BCC\" recipient email addresses.", "Intent.EXTRA_SUBJECT": "A string with the email subject.", "Intent.EXTRA_TEXT": "A string with the body of the email.", "Intent.EXTRA_STREAM": "A Uri pointing to the attachment.\n        If using the\n        ACTION_SEND_MULTIPLE\n        action, this instead is an\n        ArrayList containing\n        multiple Uri objects."}, "desc": "Composing an email with optional attachments is a common action for email apps.\nCreate an intent filter to advertise your app's ability to perform this action using the\ninformation in the following section.\nTo compose an email, use one of the following actions based on whether you'll include attachments or not, and include email details such as the recipient and subject using the extra keys listed.\n", "id": 14}
{"action": "ACTION_GET_CONTENT", "uri": "None", "mime": {}, "extras": {"EXTRA_ALLOW_MULTIPLE\n      ": "A boolean that declares whether the user can select more than one file at a time.\n      ", "EXTRA_LOCAL_ONLY\n      ": "A boolean that declares whether the returned file must be available directly from\n      the device, rather than requiring a download from a remote service.\n      ", "CATEGORY_OPENABLE": "To return only \"openable\" files that can be represented as a file stream\n      with openFileDescriptor()."}, "desc": "The following are common actions for file storage apps, including the information you need\nto create an intent filter to advertise your app's ability to perform each action.\nTo request that the user select a file such as a document or photo and return a reference to your app, use the ACTION_GET_CONTENT action and specify your desired MIME type. The file reference returned to your app is transient to your activity's current lifecycle, so if you want to access it later you must import a copy that you can read later.\nThis intent also lets the user create a new file in the process. For example, instead of selecting an existing photo, the user can capture a new photo with the camera.\nThe result intent delivered to your onActivityResult() method includes data with a URI pointing to the file. The URI can be anything, such as an http: URI, file: URI, or content: URI. However, if you'd like to restrict selectable files to only those that are accessible from a content provider (a content: URI) and that are available as a file stream with openFileDescriptor(), add the CATEGORY_OPENABLE category to your intent.\nOn Android 4.3 (API level 18) and higher, you can also let the user select multiple files by adding EXTRA_ALLOW_MULTIPLE to the intent, set to true. You can then access each of the selected files in a ClipData object returned by getClipData().\n", "id": 15}
{"action": "ACTION_OPEN_DOCUMENT", "uri": "None", "mime": {}, "extras": {"EXTRA_MIME_TYPES\n      ": "An array of MIME types corresponding to the types of files your app is\n      requesting. When you use this extra, you must set the primary MIME type in\n      setType() to \"*/*\".", "EXTRA_ALLOW_MULTIPLE\n      ": "A boolean that declares whether the user can select more than one file at a time.\n      ", "EXTRA_TITLE\n      ": "For use with ACTION_CREATE_DOCUMENT to specify\n      an initial filename.\n      ", "EXTRA_LOCAL_ONLY\n      ": "A boolean that declares whether the returned file must be available directly from\n      the device, rather than requiring a download from a remote service.\n      ", "CATEGORY_OPENABLE": "To return only \"openable\" files that can be represented as a file stream\n      with openFileDescriptor()."}, "desc": "The following are common actions for file storage apps, including the information you need\nto create an intent filter to advertise your app's ability to perform each action.\nInstead of retrieving a copy of a file that you must import to your app, by using the ACTION_GET_CONTENT action, when running on Android 4.4 or higher you can instead request to open a file that's managed by another app by using the ACTION_OPEN_DOCUMENT action and specifying a MIME type. To also let the user create a new document that your app can write to, use the ACTION_CREATE_DOCUMENT action instead.\nFor example, instead of selecting from existing PDF documents, the ACTION_CREATE_DOCUMENT intent lets users select where they'd like to create a new document, such as within another app that manages the document's storage. Your app then receives the URI location of where it can write the new document.\nWhereas the intent delivered to your onActivityResult() method from the ACTION_GET_CONTENT action might return a URI of any type, the result intent from ACTION_OPEN_DOCUMENT and ACTION_CREATE_DOCUMENT always specify the chosen file as a content: URI that's backed by a DocumentsProvider. You can open the file with openFileDescriptor() and query its details using columns from DocumentsContract.Document.\nThe returned URI grants your app long-term read access to the file, also possibly with write access. The ACTION_OPEN_DOCUMENT action is particularly useful when you want to read an existing file without making a copy into your app or when you want to open and edit a file in place.\nYou can also let the user select multiple files by adding EXTRA_ALLOW_MULTIPLE to the intent, set to true. If the user selects just one item, then you can retrieve the item from getData(). If the user selects more than one item, then getData() returns null and you must instead retrieve each item from a ClipData object that is returned by getClipData().\nNote: Your intent must specify a MIME type and must declare the CATEGORY_OPENABLE category. If appropriate, you can specify more than one MIME type by adding an array of MIME types with the EXTRA_MIME_TYPES extra\u2014if you do so, you must set the primary MIME type in setType() to \"*/*\".\n", "id": 16}
{"action": "ACTION_CREATE_DOCUMENT", "uri": "None", "mime": {}, "extras": {"EXTRA_MIME_TYPES\n      ": "An array of MIME types corresponding to the types of files your app is\n      requesting. When you use this extra, you must set the primary MIME type in\n      setType() to \"*/*\".", "EXTRA_ALLOW_MULTIPLE\n      ": "A boolean that declares whether the user can select more than one file at a time.\n      ", "EXTRA_TITLE\n      ": "For use with ACTION_CREATE_DOCUMENT to specify\n      an initial filename.\n      ", "EXTRA_LOCAL_ONLY\n      ": "A boolean that declares whether the returned file must be available directly from\n      the device, rather than requiring a download from a remote service.\n      ", "CATEGORY_OPENABLE": "To return only \"openable\" files that can be represented as a file stream\n      with openFileDescriptor()."}, "desc": "The following are common actions for file storage apps, including the information you need\nto create an intent filter to advertise your app's ability to perform each action.\nInstead of retrieving a copy of a file that you must import to your app, by using the ACTION_GET_CONTENT action, when running on Android 4.4 or higher you can instead request to open a file that's managed by another app by using the ACTION_OPEN_DOCUMENT action and specifying a MIME type. To also let the user create a new document that your app can write to, use the ACTION_CREATE_DOCUMENT action instead.\nFor example, instead of selecting from existing PDF documents, the ACTION_CREATE_DOCUMENT intent lets users select where they'd like to create a new document, such as within another app that manages the document's storage. Your app then receives the URI location of where it can write the new document.\nWhereas the intent delivered to your onActivityResult() method from the ACTION_GET_CONTENT action might return a URI of any type, the result intent from ACTION_OPEN_DOCUMENT and ACTION_CREATE_DOCUMENT always specify the chosen file as a content: URI that's backed by a DocumentsProvider. You can open the file with openFileDescriptor() and query its details using columns from DocumentsContract.Document.\nThe returned URI grants your app long-term read access to the file, also possibly with write access. The ACTION_OPEN_DOCUMENT action is particularly useful when you want to read an existing file without making a copy into your app or when you want to open and edit a file in place.\nYou can also let the user select multiple files by adding EXTRA_ALLOW_MULTIPLE to the intent, set to true. If the user selects just one item, then you can retrieve the item from getData(). If the user selects more than one item, then getData() returns null and you must instead retrieve each item from a ClipData object that is returned by getClipData().\nNote: Your intent must specify a MIME type and must declare the CATEGORY_OPENABLE category. If appropriate, you can specify more than one MIME type by adding an array of MIME types with the EXTRA_MIME_TYPES extra\u2014if you do so, you must set the primary MIME type in setType() to \"*/*\".\n", "id": 17}
{"action": "ACTION_RESERVE_TAXI_RESERVATION", "uri": "None", "mime": {}, "extras": {}, "desc": "Calling a car is a common local action. Create an intent filter to advertise your app's\nability to perform this action using the information in the following section.\nTo call a taxi, use the ACTION_RESERVE_TAXI_RESERVATION action.\nNote: Apps must ask for confirmation from the user before completing this action.\n", "id": 18}
{"action": "ACTION_VIEW", "uri": "geo:latitude,longitude Show the map at the given longitude and latitude. Example: \"geo:47.6,-122.3\" geo:latitude,longitude?z=zoom Show the map at the given longitude and latitude at a certain zoom level. A zoom level of 1 shows the whole Earth, centered at the given lat,lng. The highest (closest) zoom level is 23. Example: \"geo:47.6,-122.3?z=11\" geo:0,0?q=lat,lng(label) Show the map at the given longitude and latitude with a string label. Example: \"geo:0,0?q=34.99,-106.61(Treasure)\" geo:0,0?q=my+street+address Show the location for \"my street address\", which can be a specific address or location query. Example: \"geo:0,0?q=1600+Amphitheatre+Parkway%2C+CA\" Note: All strings passed in the geo URI must be encoded. For example, the string 1st & Pike, Seattle becomes 1st%20%26%20Pike%2C%20Seattle. Spaces in the string are encoded with %20 or replaced with the plus sign (+).", "mime": {}, "extras": {}, "desc": "Showing a location on a map is a common action for map apps.\nCreate an intent filter to advertise your app's ability to perform this action using the\ninformation in the following section.\nTo open a map, use the ACTION_VIEW action and specify the location information in the intent data with one of the following schemes.\n", "id": 19}
{"action": "ACTION_VIEW", "uri": "file:<URI> content:<URI> http:<URL>", "mime": {"\"audio/*\"\n    \"application/ogg\"\n    \"application/x-ogg\"\n    \"application/itunes\"\n    Or any other that your app requires.\n  ": ""}, "extras": {}, "desc": "The following are common actions for music and video apps, including the information you need\nto create an intent filter to advertise your app's ability to perform each action.\nTo play a music file, use the ACTION_VIEW action and specify the URI location of the file in the intent data.\n", "id": 20}
{"action": "INTENT_ACTION_MEDIA_PLAY_FROM_SEARCH", "uri": "None", "mime": {}, "extras": {"MediaStore.EXTRA_MEDIA_FOCUS (required)": "\nIndicates the search mode: whether the user is looking for a particular artist, album, song,\nor playlist. Most search modes take additional extras. For example, if the user\nis interested in listening to a particular song, the intent might have three additional extras:\nthe song title, the artist, and the album. This intent supports the following search modes for\neach value of EXTRA_MEDIA_FOCUS:\n\nAny - \"vnd.android.cursor.item/*\"\n\nPlay any music. The receiving app plays some music based on a smart choice, such\nas the last playlist the user listened to.\nAdditional extras:\n\n  QUERY (required): an empty string. This extra is always\n      provided for backward compatibility. Existing apps that don't know about search modes can\n      process this intent as an unstructured search.\n\n\nUnstructured - \"vnd.android.cursor.item/*\"\n\nPlay a particular song, album, or genre from an unstructured search query. Apps can generate\nan intent with this search mode when they can't identify the type of content the user wants to\nlisten to. Use more specific search modes when possible.\nAdditional extras:\n\n  QUERY (required): a string that contains any combination\n      of the artist, the album, the song name, or the genre.\n\n\nGenre -\nAudio.Genres.ENTRY_CONTENT_TYPE\n\nPlay music of a particular genre.\nAdditional extras:\n\n  \"android.intent.extra.genre\" (required) - The genre.\n  QUERY (required): the genre. This extra is always provided\n      for backward compatibility. Existing apps that don't know about search modes can process\n      this intent as an unstructured search.\n\n\nArtist -\nAudio.Artists.ENTRY_CONTENT_TYPE\n\nPlay music from a particular artist.\nAdditional extras:\n\n  EXTRA_MEDIA_ARTIST (required): the artist.\n  \"android.intent.extra.genre\": the genre.\n  QUERY (required): a string that contains any combination of\n      the artist or the genre. This extra is always provided for backward compatibility.\n      Existing apps that don't know about search modes can process this intent as an unstructured\n      search.\n\n\nAlbum -\nAudio.Albums.ENTRY_CONTENT_TYPE\n\nPlay music from a particular album.\nAdditional extras:\n\n  EXTRA_MEDIA_ALBUM (required): the album.\n  EXTRA_MEDIA_ARTIST: the artist.\n  \"android.intent.extra.genre\": the genre.\n  QUERY (required): a string that contains any combination of\n      the album or the artist. This extra is always provided for backward\n      compatibility. Existing apps that don't know about search modes can process this intent as an\n      unstructured search.\n\n\nSong - \"vnd.android.cursor.item/audio\"\n\nPlay a particular song.\nAdditional extras:\n\n  EXTRA_MEDIA_ALBUM: the album.\n  EXTRA_MEDIA_ARTIST: the artist.\n  \"android.intent.extra.genre\": the genre.\n  EXTRA_MEDIA_TITLE (required): the song name.\n  QUERY (required): a string that contains any combination of\n      the album, the artist, the genre, or the title. This extra is always provided for\n      backward compatibility. Existing apps that don't know about search modes can process this\n      intent as an unstructured search.\n\n\nPlaylist - Audio.Playlists.ENTRY_CONTENT_TYPE\n\nAndroid playlists are deprecated. The API is no longer\nmaintained, but the current functionality remains for compatibility.\nPlay a particular playlist or a playlist that matches some criteria specified\nby additional extras.\nAdditional extras:\n\n  EXTRA_MEDIA_ALBUM: the album.\n  EXTRA_MEDIA_ARTIST: the artist.\n  \"android.intent.extra.genre\": the genre.\n  \"android.intent.extra.playlist\": the playlist.\n  EXTRA_MEDIA_TITLE: the song name that the playlist is\n      based on.\n  QUERY (required): a string that contains any combination\n      of the album, the artist, the genre, the playlist, or the title. This extra is always\n      provided for backward compatibility. Existing apps that don't know about search modes can\n      process this intent as an unstructured search.\n\n\n\n"}, "desc": "The following are common actions for music and video apps, including the information you need\nto create an intent filter to advertise your app's ability to perform each action.\nTo play music based on a search query, use the INTENT_ACTION_MEDIA_PLAY_FROM_SEARCH intent. An app might fire this intent in response to the user's voice command to play music. The receiving app for this intent performs a search within its inventory to match existing content to the given query and starts playing that content.\nIn this intent, include the EXTRA_MEDIA_FOCUS string extra, which specifies the intended search mode. For example, the search mode can specify whether the search is for an artist name or song name.\n", "id": 21}
{"action": "ACTION_CREATE_NOTE", "uri": "None", "mime": {}, "extras": {"\n        EXTRA_NAME\n      ": "A string indicating the title or subject of the note.", "\n       EXTRA_TEXT\n      ": "A string indicating the text of the note.", "QUERY": "A string that contains the search query.", "SearchManager.QUERY": "The search string.", "\"subject\"": "A string for the message subject (usually for MMS only).", "\"sms_body\"": "A string for the text message.", "EXTRA_STREAM": "A Uri pointing to the\nimage or video to attach. If using the ACTION_SEND_MULTIPLE action,\nthis extra is an ArrayList of\nUri objects pointing to the images or videos to attach."}, "desc": "Creating a note is a common action for note-taking apps.\nCreate an intent filter to advertise your app's ability to perform this action using the\ninformation in the following section.\nTo create a new note, use the ACTION_CREATE_NOTE action and specify note details such as the subject and text using following extras.\nNote: Apps must ask for confirmation from the user before completing this action.\n", "id": 22}
{"action": "ACTION_DIAL", "uri": "tel:<phone-number> voicemail:<phone-number>", "mime": {}, "extras": {}, "desc": "Initiating a call is a common action for phone apps.\nCreate an intent filter to advertise your app's ability to perform this action using the\ninformation in the following section.\nTo open the phone app and dial a phone number, use the ACTION_DIAL action and specify a phone number using the following URI scheme. When the phone app opens, it displays the phone number, and the user must tap the Call button to begin the phone call.\nTo place a phone call directly, use the ACTION_CALL action and specify a phone number using the following URI scheme. When the phone app opens, it begins the phone call. The user doesn't need to tap the Call button.\nThe ACTION_CALL action requires that you add the CALL_PHONE permission to your manifest file:\n", "id": 23}
{"action": "ACTION_CALL", "uri": "tel:<phone-number> voicemail:<phone-number>", "mime": {}, "extras": {}, "desc": "Initiating a call is a common action for phone apps.\nCreate an intent filter to advertise your app's ability to perform this action using the\ninformation in the following section.\nTo open the phone app and dial a phone number, use the ACTION_DIAL action and specify a phone number using the following URI scheme. When the phone app opens, it displays the phone number, and the user must tap the Call button to begin the phone call.\nTo place a phone call directly, use the ACTION_CALL action and specify a phone number using the following URI scheme. When the phone app opens, it begins the phone call. The user doesn't need to tap the Call button.\nThe ACTION_CALL action requires that you add the CALL_PHONE permission to your manifest file:\n", "id": 24}
{"action": "CALL_PHONE", "uri": "tel:<phone-number> voicemail:<phone-number>", "mime": {}, "extras": {}, "desc": "Initiating a call is a common action for phone apps.\nCreate an intent filter to advertise your app's ability to perform this action using the\ninformation in the following section.\nTo open the phone app and dial a phone number, use the ACTION_DIAL action and specify a phone number using the following URI scheme. When the phone app opens, it displays the phone number, and the user must tap the Call button to begin the phone call.\nTo place a phone call directly, use the ACTION_CALL action and specify a phone number using the following URI scheme. When the phone app opens, it begins the phone call. The user doesn't need to tap the Call button.\nThe ACTION_CALL action requires that you add the CALL_PHONE permission to your manifest file:\n", "id": 25}
{"action": "\"com.google.android.gms.actions.SEARCH_ACTION\"", "uri": "None", "mime": {}, "extras": {"QUERY": "A string that contains the search query."}, "desc": "The following are common actions for search apps, including the information you need\nto create an intent filter to advertise your app's ability to perform each action.\nTo support search within the context of your app, declare an intent filter in your app with the SEARCH_ACTION action, as shown in the following intent filter example.\nNote: We don't recommend using SEARCH_ACTION for app search. Instead, implement the GET_THING action to leverage Google Assistant's built-in support for in-app search. For more information, see the Google Assistant App Actions documentation.\n", "id": 26}
{"action": "ACTION_WEB_SEARCH", "uri": "None", "mime": {}, "extras": {"SearchManager.QUERY": "The search string."}, "desc": "The following are common actions for search apps, including the information you need\nto create an intent filter to advertise your app's ability to perform each action.\nTo initiate a web search, use the ACTION_WEB_SEARCH action and specify the search string in the SearchManager.QUERY extra.\n", "id": 27}
{"action": "ACTION_SETTINGS", "uri": "None", "mime": {}, "extras": {}, "desc": "To open a screen in the system Settings app when your app requires the user to change something,\nuse one of the following intent actions:\n\nTo open a screen in the system Settings app when your app requires the user to change something, use one of the following intent actions:\n", "id": 28}
{"action": "ACTION_WIRELESS_SETTINGS", "uri": "None", "mime": {}, "extras": {}, "desc": "To open a screen in the system Settings app when your app requires the user to change something,\nuse one of the following intent actions:\n\nTo open a screen in the system Settings app when your app requires the user to change something, use one of the following intent actions:\n", "id": 29}
{"action": "ACTION_AIRPLANE_MODE_SETTINGS", "uri": "None", "mime": {}, "extras": {}, "desc": "To open a screen in the system Settings app when your app requires the user to change something,\nuse one of the following intent actions:\n\nTo open a screen in the system Settings app when your app requires the user to change something, use one of the following intent actions:\n", "id": 30}
{"action": "ACTION_WIFI_SETTINGS", "uri": "None", "mime": {}, "extras": {}, "desc": "To open a screen in the system Settings app when your app requires the user to change something,\nuse one of the following intent actions:\n\nTo open a screen in the system Settings app when your app requires the user to change something, use one of the following intent actions:\n", "id": 31}
{"action": "ACTION_APN_SETTINGS", "uri": "None", "mime": {}, "extras": {}, "desc": "To open a screen in the system Settings app when your app requires the user to change something,\nuse one of the following intent actions:\n\nTo open a screen in the system Settings app when your app requires the user to change something, use one of the following intent actions:\n", "id": 32}
{"action": "ACTION_BLUETOOTH_SETTINGS", "uri": "None", "mime": {}, "extras": {}, "desc": "To open a screen in the system Settings app when your app requires the user to change something,\nuse one of the following intent actions:\n\nTo open a screen in the system Settings app when your app requires the user to change something, use one of the following intent actions:\n", "id": 33}
{"action": "ACTION_DATE_SETTINGS", "uri": "None", "mime": {}, "extras": {}, "desc": "To open a screen in the system Settings app when your app requires the user to change something,\nuse one of the following intent actions:\n\nTo open a screen in the system Settings app when your app requires the user to change something, use one of the following intent actions:\n", "id": 34}
{"action": "ACTION_LOCALE_SETTINGS", "uri": "None", "mime": {}, "extras": {}, "desc": "To open a screen in the system Settings app when your app requires the user to change something,\nuse one of the following intent actions:\n\nTo open a screen in the system Settings app when your app requires the user to change something, use one of the following intent actions:\n", "id": 35}
{"action": "ACTION_INPUT_METHOD_SETTINGS", "uri": "None", "mime": {}, "extras": {}, "desc": "To open a screen in the system Settings app when your app requires the user to change something,\nuse one of the following intent actions:\n\nTo open a screen in the system Settings app when your app requires the user to change something, use one of the following intent actions:\n", "id": 36}
{"action": "ACTION_DISPLAY_SETTINGS", "uri": "None", "mime": {}, "extras": {}, "desc": "To open a screen in the system Settings app when your app requires the user to change something,\nuse one of the following intent actions:\n\nTo open a screen in the system Settings app when your app requires the user to change something, use one of the following intent actions:\n", "id": 37}
{"action": "ACTION_SECURITY_SETTINGS", "uri": "None", "mime": {}, "extras": {}, "desc": "To open a screen in the system Settings app when your app requires the user to change something,\nuse one of the following intent actions:\n\nTo open a screen in the system Settings app when your app requires the user to change something, use one of the following intent actions:\n", "id": 38}
{"action": "ACTION_LOCATION_SOURCE_SETTINGS", "uri": "None", "mime": {}, "extras": {}, "desc": "To open a screen in the system Settings app when your app requires the user to change something,\nuse one of the following intent actions:\n\nTo open a screen in the system Settings app when your app requires the user to change something, use one of the following intent actions:\n", "id": 39}
{"action": "ACTION_INTERNAL_STORAGE_SETTINGS", "uri": "None", "mime": {}, "extras": {}, "desc": "To open a screen in the system Settings app when your app requires the user to change something,\nuse one of the following intent actions:\n\nTo open a screen in the system Settings app when your app requires the user to change something, use one of the following intent actions:\n", "id": 40}
{"action": "ACTION_MEMORY_CARD_SETTINGS", "uri": "None", "mime": {}, "extras": {}, "desc": "To open a screen in the system Settings app when your app requires the user to change something,\nuse one of the following intent actions:\n\nTo open a screen in the system Settings app when your app requires the user to change something, use one of the following intent actions:\n", "id": 41}
{"action": "ACTION_SENDTO", "uri": "sms:<phone_number> smsto:<phone_number> mms:<phone_number> mmsto:<phone_number> These schemes are all handled the same way.", "mime": {"\"text/plain\"\n    \"image/*\"\n    \"video/*\"\n  ": ""}, "extras": {"\"subject\"": "A string for the message subject (usually for MMS only).", "\"sms_body\"": "A string for the text message.", "EXTRA_STREAM": "A Uri pointing to the\nimage or video to attach. If using the ACTION_SEND_MULTIPLE action,\nthis extra is an ArrayList of\nUri objects pointing to the images or videos to attach."}, "desc": "Composing an SMS/MMS message with an attachment is a common action for text messaging apps.\nCreate an intent filter to advertise your app's ability to perform this action using the\ninformation in the following section.\nTo initiate an SMS or MMS text message, use one of the following intent actions and specify message details such as the phone number, subject, and message body using the following extra keys.\n", "id": 42}
{"action": "ACTION_SEND", "uri": "sms:<phone_number> smsto:<phone_number> mms:<phone_number> mmsto:<phone_number> These schemes are all handled the same way.", "mime": {"\"text/plain\"\n    \"image/*\"\n    \"video/*\"\n  ": ""}, "extras": {"\"subject\"": "A string for the message subject (usually for MMS only).", "\"sms_body\"": "A string for the text message.", "EXTRA_STREAM": "A Uri pointing to the\nimage or video to attach. If using the ACTION_SEND_MULTIPLE action,\nthis extra is an ArrayList of\nUri objects pointing to the images or videos to attach."}, "desc": "Composing an SMS/MMS message with an attachment is a common action for text messaging apps.\nCreate an intent filter to advertise your app's ability to perform this action using the\ninformation in the following section.\nTo initiate an SMS or MMS text message, use one of the following intent actions and specify message details such as the phone number, subject, and message body using the following extra keys.\n", "id": 43}
{"action": "ACTION_SEND_MULTIPLE", "uri": "sms:<phone_number> smsto:<phone_number> mms:<phone_number> mmsto:<phone_number> These schemes are all handled the same way.", "mime": {"\"text/plain\"\n    \"image/*\"\n    \"video/*\"\n  ": ""}, "extras": {"\"subject\"": "A string for the message subject (usually for MMS only).", "\"sms_body\"": "A string for the text message.", "EXTRA_STREAM": "A Uri pointing to the\nimage or video to attach. If using the ACTION_SEND_MULTIPLE action,\nthis extra is an ArrayList of\nUri objects pointing to the images or videos to attach."}, "desc": "Composing an SMS/MMS message with an attachment is a common action for text messaging apps.\nCreate an intent filter to advertise your app's ability to perform this action using the\ninformation in the following section.\nTo initiate an SMS or MMS text message, use one of the following intent actions and specify message details such as the phone number, subject, and message body using the following extra keys.\n", "id": 44}
{"action": "ACTION_VIEW", "uri": "http:<URL> https:<URL>", "mime": {"\"text/plain\"\n      \"text/html\"\n      \"application/xhtml+xml\"\n      \"application/vnd.wap.xhtml+xml\"\n    ": ""}, "extras": {}, "desc": "Loading a web URL is a common action for web browser apps.\nCreate an intent filter to advertise your app's ability to perform this action using the\ninformation in the following section.\nTo open a web page, use the ACTION_VIEW action and specify the web URL in the intent data.\n", "id": 45}
